set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR arm64)

set(CMAKE_FIND_ROOT_PATH  $ENV{PLATFORM_BASE}/toolchain/aarch64-linux-gnu/)
message(INFO ${CMAKE_FIND_ROOT_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
#set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)

set(CC gcc)
set(CXX g++)

set(CROSS_COMPILE $ENV{PLATFORM_BASE}/toolchain/aarch64-linux-gnu/bin/aarch64-linux-gnu-)
set(TOOLCHAIN_HOME $ENV{PLATFORM_BASE}/toolchain/aarch64-linux-gnu)
set(CMAKE_C_COMPILER ${CROSS_COMPILE}${CC})
#find_program(CMAKE_C_COMPILER ${CROSS_COMPILE}gcc   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
#find_program(CMAKE_C_COMPILER ${CROSS_COMPILE}gcc   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
find_program(CMAKE_OBJCOPY ${CROSS_COMPILE}objcopy   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
find_program(CMAKE_DUMP ${CROSS_COMPILE}objdump   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
find_program(CMAKE_LINK ${CROSS_COMPILE}ld   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
find_program(CMAKE_AR ${CROSS_COMPILE}ar   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
find_program(CMAKE_AS ${CROSS_COMPILE}as   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
find_program(CMAKE_RANLIB ${CROSS_COMPILE}ranlib   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
find_program(CMAKE_READELF ${CROSS_COMPILE}readelf   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
find_program(CMAKE_NM ${CROSS_COMPILE}nm   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
find_program(CMAKE_GDB ${CROSS_COMPILE}gdb   PATH ${TOOLCHAIN_HOME} NO_DEFAULT_PATH)
set(CMAKE_CXX_COMPILER ${CROSS_COMPILE}g++)

message(INFO ${CMAKE_CXX_COMPILER})
message(INFO ${CMAKE_OBJCOPY})
message(INFO ${CMAKE_LINK})
message(INFO ${CMAKE_GDB})

if(CMAKE_C_COMPILER STREQUAL CMAKE_C_COMPILER-NOFOUND)
    message(ERROR "toolchain is not found please check")
endif()

